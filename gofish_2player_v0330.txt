;;; Model of go fish - 2 player mode
;;;

(add-dm
    (goal isa state_control state start_state)
)

;;; no need to choose player

(set-all-baselevels -100 10) ;; time offset and number of references
(sgp :rt -2.5)

(p start-retrieve-state-first ;;; retrive state from action module
	=goal>
		isa state_control
		state start_state
==>
	=goal>
		isa state_control
		state retrieving
	+action>
		isa decision
		state wait_memorize
        chunk sequence
        current_player nil
        card_ask nil
)


(p gofish ;;;stradegy when go fish
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state gofish
==>
    +action>
        isa decision
        state wait_memorize
        chunk sequence
        current_player nil
        card_ask nil
)

(p succeed ;;;stradegy when told succeed
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state succeed
==>
    +goal>
        isa state_control
        state start
    -action>
)

(p wait-memorize ;;;stradegy when it's not your turn
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state wait_memorize
        card_ask =card  
==>
    +action>
        isa decision
        state wait_memorize
        chunk sequence
        current_player nil
        card_ask nil
)


(p start_a_new_round 
	=goal>
		isa state_control
		state retrieving
	=action>
 		isa decision
		state start
        ;;;card_ask =card ;;; card asked
==>
    =goal>
        isa state_control
        state start
    -action>
)

(p start_check_card ;;; check what card you have
    =goal>
        isa state_control
        state start
==>
    +goal>
        isa general_stradegy2 ;;; general strategy 1 is not applicable in this scenario
        ;;; if the card is exposed, it's exposed to all player
        state start
	+action>
		isa decision
		state checking
		card_deck first
        strategy g2
        chunk check
)

(p g2-retrieve-memory
    =goal>
        isa general_stradegy2
        state start
    =action>
    	isa decision
    	state checking
    	card_deck =card 
==>
    =goal>
        isa general_stradegy2
        state next
        card =card
    +retrieval>
        isa decision
        chunk sequence ;;;recall cards from sequences
        card_ask =card
)


(p g2-retrieve-memory-f
	=goal>
		isa general_stradegy2
		state next
        card =card
	?retrieval>
		state  error 
==>
	=goal>
		isa general_stradegy2
		state start
	+action>
		isa decision
		state checking
		card_deck =card
        chunk check
        strategy g2
)


(p g2-retrieve-memory-s1
	=goal>
		isa general_stradegy2
		state next
	=retrieval>
        isa decision
        chunk sequence ;;;recall cards from sequences
        card_ask =card
==>
	+goal>
        isa state_control
        state retrieving
	+action>
		isa decision
		state ask
		card_ask =card
		opponent_player player1		
        chunk exposed_cards
        strategy g2
)

(p general2-failure ;;;can't remeber who asked what card  before
    =goal>
		isa general_stradegy2
		state start
    =action>
    	isa decision
    	state checking_failed 
==>
    +goal>
        isa special_stradegy
        state select
)

(p special-stradegy-choose-a ;;; select aggressive stradegy
	=goal>
        isa special_stradegy
        state select
==>
	+goal>
        isa aggressive_stradegy
        state start
    +action>
        isa decision
        state checking
        card_deck multiple ;; check for multiple cards.
        chunk check
        strategy aggressive
)

(p aggressive-stradegy-startA
	=goal>
        isa aggressive_stradegy
        state start
    =action>
        isa decision
        state checking 
        card_deck =card ;;; Multiple card retrieved
==>
    +goal>
        isa state_control
        state retrieving
    +action>
        isa decision
        state ask
        card_ask =card
        opponent_player player1 
        chunk exposed_cards
        strategy aggressive
)

(p aggressive-stradegy-startB
    =goal>
        isa aggressive_stradegy
        state start
    =action>
        isa decision
        state multiple_failed ;;; No multiple card
==>
    =goal>
        isa aggressive_stradegy
        state next
    +action>
        isa decision
        state checking 
        card_deck first 
        chunk check
        strategy aggressive
)

(p aggressive-stradegy-next
    =goal>
        isa aggressive_stradegy
        state next
    =action>
        isa decision
        state checking 
        card_deck =card
==>
    =goal>
        isa aggressive_stradegy
        state check
        card =card
    +retrieval>
        isa decision
        chunk exposed_cards 
        card_ask =card
)

(p aggressive-stradegy-check-success
    =goal>
        isa aggressive_stradegy
        state check
    =retrieval>
        isa decision
        chunk exposed_cards ;;; exposed card
        card_ask =card
==>
    =goal>
        isa aggressive_stradegy
        state next
    +action>
        isa decision
        state checking 
        card_deck =card 
        chunk check
        strategy aggressive
)

(p aggressive-stradegy-check-failed
    =goal>
        isa aggressive_stradegy
        state check
        card =card
    ?retrieval>
        state error ;; not exposed
==>
    +goal>
        isa state_control
        state retrieving
    +action>
        isa decision
        state ask
        card_ask =card
        opponent_player player1 
        chunk exposed_cards
        strategy aggressive
)

(p aggressive-stradegy-next-failed
    =goal>
        isa aggressive_stradegy
        state next
    =action>
        isa decision
        state checking_failed
==>
    +goal>
        isa random
        state start
    +action>
        isa decision
        state checking
        card_deck first
        chunk check
        strategy random
)

(p special-stradegy-choose-c ;;; select conservative stradegy
    =goal>
        isa special_stradegy
        state select
==>
    +goal>
        isa conservative_stradegy
        state start
    +action>
        isa decision
        state checking
        card_deck first
        chunk check
        strategy conservative
)


(p conservative_stradegy-startA
	=goal>
        isa conservative_stradegy
        state start
    =action>
        isa decision
        state checking 
        card_deck =card
==>
	=goal>
		isa conservative_stradegy
		state next
	+retrieval>
		isa decision
        chunk exposed_cards
        card_ask =card
)

(p conservative_stradegy-next-fail
    =goal>
        isa conservative_stradegy
        state next
    ?retrieval>
        state error ;;; not exposed to all players
==>
    =goal>
        isa conservative_stradegy
        state start
    +action>
        isa decision
        state checking
        card_deck =card
        chunk check
        strategy conservative
)

(p conservative_stradegy-next-success
    =goal>
        isa conservative_stradegy
        state next
    =retrieval>
        isa decision
        chunk exposed_cards
        card_ask =card
==>
    +goal>
        isa state_control
        state retrieving
    +action>
        isa decision
        state ask
        card_ask =card
        opponent_player player1 
        chunk exposed_cards
        strategy conservative
)

(p conservative_stradegy-startB
	=goal>
        isa conservative_stradegy
        state start
    =action>
        isa decision
        state checking_failed
==>
	+goal>
        isa aggressive_stradegy
        state start
    +action>
        isa decision
        state checking
        card_deck multiple 
        chunk check
        strategy aggressive
)

(p random-ask
    =goal>
        isa random
        state start
    =action>
        isa decision
        state checking
        card_deck =card ;; the first card
==>
    +goal>
        isa state_control
        state retrieving
    +action>
        isa decision
        state ask
        card_ask =card
        opponent_player player1 
        chunk exposed_cards
        strategy random
)


(goal-focus goal)