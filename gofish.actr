;;; Model of go fish - 4 player mode
;;;

(add-dm
    (goal isa state_control state start_state)
    (action isa decision state first_start card_ask init opponent_player init current_player init state_round init set false first_starter false)
    (p1 isa player-order current player1 next player2 ) ;;;player 1, 2, 3 is mapped to different player in swfit
    (p2 isa player-order current player2 next player3 )
    (p3 isa player-order current player3 next player1 )
)

(set-all-baselevels -100 10) ;; time offset and number of references
 
(p start-retrieve-state-first ;;; retrive state from action module
	=goal>
		isa state_control
		state start_state
==>
	=goal>
		isa state_control
		state retrieving
	+action>
		isa decision
		state first_start
)

(p first_round;;; special treatment for first round
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        ;;; current_player self ;;; you are the player fo first round
        first_starter true ;;; only one player has this as true
        ;;; 
        opponent_player =player
        card_ask =card;;; card asked
==>
    +imaginal>
        isa exposed_cards
        card =card
        player =player
	=action>
		isa decision
		first_starter false
)

(p wait-memorize-succeed;;;stradegy when it's not your turn
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state wait_memorize
        first_starter false
        current_player =current_player ;;; not self definitly
        ;;; opponent_player =opponent_player ;;; can be self
        card_ask =card;;; card asked
        state_round succeed ;;;succeed-gofish 
==>
    +imaginal>
        isa sequence
        card =card
        player =current_player
	+action>
		isa decision
		state wait_memorize
)

(p wait-memorize-gofish;;;stradegy when it's not your turn
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state wait_memorize
        first_starter false
        current_player =current_player ;;; not self definitly
        opponent_player =opponent_player ;;; can be self
        card_ask =card;;; card asked
        state_round gofish ;;;succeed-gofish 
==>
    +imaginal>
        isa sequence
        card =card
        player =current_player
	+goal>
		isa gofish-wait
		state next
        card =card
        player =opponent_player
)

(p wait-memorize-gofish-next 
    =goal>
        isa gofish-wait
        state start
        card =card
        player =player
==>
    +imaginal>
        isa negative_sequence
        card =card
        player =player
    +goal>
        isa state_control
        state retrieving
	+action>
		isa decision
		state wait_memorize
)

(p succeed_round_B ;;;stradegy when told succeed
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state succeed
        first_starter false
        set true ;;; the card is a set
==>
    =goal>
        isa state_control
        state start ;;; start a new decision
    -retrieval>
)

(p succeed_round_A1 ;;;stradegy when told succeed
    =goal>
        isa state_control
        state retrieving
    =action>
        isa decision
        state succeed
        first_starter false
        opponent_player =player ;;; 
        card_ask =card ;;; card asked
        set false ;;; the card is not a set yet
==>
    +goal>
        isa succeed_round
        state second
        card_ask =card ;;; temporarily stored for convenience
    +retrieval>
    	isa player-order
    	current =player
)

(p succeed_round_A2
	=goal>
		isa succeed_round
		state second
		card_ask =card
	=retrieval>
		isa player-order
		next =player
==>
	=goal>
		isa succeed_round
		state third
		card_ask =card
    +retrieval>
		isa negative_sequence
        card =card
		player =player
)

(p succeed_round_A2-f
	=goal>
		isa succeed_round
		state third
		card_ask =card
	?retrieval>
        state error ;;; 
==>
	=goal>
		isa succeed_round
		state third
		card_ask =card
    +retrieval>
		isa negative_sequence
        card =card
		player =player
)


(p succeed_round_end_A ;;;stradegy when told succeed
	=goal>
		isa succeed_round
		state next
		card_ask =card
    =retrieval>
    	isa player-order
    	end true ;;; all the players have been asked and still no set
==>
	+goal>
		isa state_control
		state start
    -retrieval>
)


(p gofishA ;;;stradegy when go fish
	=goal>
		isa state_control
		state retrieving
    =action>
        isa decision
        state gofish
        first_starter false
        opponent_player =player 
        card_asked =card
==>
	=goal>
		isa state_control
		state retrieving
    +imaginal>
        isa negative_sequence
        card =card
        player =player
        ;;;;conservative stradegy - also remember the negative relationship 
	+action>
		isa decision
		state wait_memorize
		;;; card_ask  nil
		;;; card_get  nil
		;;; opponent_player  nil
		;;; current_player   nil
		;;; state_round      nil
)


(p start_a_new_round 
	=goal>
		isa state_control
		state retrieving
	=action>
 		isa decision
		state start
        current_player =current_player ;;; player of the most recent round
        card_ask =card ;;; card asked
        state_round gofish 
==>
    =goal>
        isa state_control
        state start
    +imaginal>
        isa sequence
        card =card
        player =current_player
)

(p check_card ;;; check what card you have
    =goal>
        isa state_control
        state start
==>
    +goal>
        isa general_stradegy1
        state start
	+action>
		isa decision
		state checking
		card_deck first
)


(p start_general1 ;;; a new turn for the player with previous info
;;; ask for exposed cards
    =goal>
        isa general_stradegy1
        state start
    =action>
    	isa decision
    	state checking
    	card_deck =card;;; the card_deck will be updated after each checking
==>
    =goal>
        isa general_stradegy1
        state next
        card =card
    +retrieval>
        isa exposed_cards ;;;recall exposed cards
        card =card
)

(p start_general1_check_cards-f
;;; ask for exposed cards
    =goal>
        isa general_stradegy1
        state next
        card =card
    ?retrieval>
        state  error ;;; this card is not in memory
==>
	+goal>
		isa general_stradegy1
		state start
	+action>
		isa decision
		state checking
		card_deck =card  ;;;check the next card (written in swift)
)

(p start_g1_success_check_cardA
    =goal>
        isa general_stradegy1
        state next
        card =card
    =retrieval>
        isa exposed_cards
        card =card
        -player player3
        player =player
==>
	=goal>
        isa general_stradegy1
        state after_next
        card =card
	+retrieval>
    	isa player-order
    	current =player
)

(p start_g1_success_check_cardA_next
    =goal>
        isa general_stradegy1
        state after_next
        card =card
    =retrieval>
        isa player-order
        next =player
        ;;;-end true
==>
	+goal>
        isa state_control
        state retrieving
    +imaginal>
        isa exposed_cards
        card =card
        player =player        
	+action>
		isa decision
		state ask 
		opponent_player =player
		card_ask =card
		;;; card_get nil
		;;; current_player self
)

;;;result :succeed/gofish

(p g1_failure ;;; no cards in deck can be recalled from memory
    =goal>
        isa general_stradegy1
        state start
    =action>
    	isa decision
    	state checking_failed 
==>
    +goal>
        isa general_stradegy2
        state start
	+action>
		isa decision
		state checking
		card_deck first
)

(p g2-retrieve-memory
    =goal>
        isa general_stradegy2
        state start
    =action>
    	isa decision
    	state checking
    	card_deck =card ;;; retrieve the first card
==>
    =goal>
        isa general_stradegy2
        state next
        card =card
    +retrieval>
        isa sequence ;;;recall cards from sequences
        card =card
)


(p g2-retrieve-memory-f
	=goal>
		isa general_stradegy2
		state next
        card =card
	?retrieval>
		state  error 
==>
	=goal>
		isa general_stradegy2
		state start
	+action>
		isa decision
		state checking
		card_deck =card
)


(p g2-retrieve-memory-s1
	=goal>
		isa general_stradegy2
		state next
	=retrieval>
        isa sequence ;;;recall cards from sequences
        card =card
        player =player
==>
	+goal>
        isa state_control
        state retrieving
    +imaginal>
    	isa exposed_cards 
    	card =card
    	player =player 
	+action>
		isa decision
		state ask
		card_ask =card
		opponent_player =player		
		;;; card_get nil
		;;; current_player self
)

(p general2-failure ;;;can't remeber who asked what card  before
    =goal>
		isa general_stradegy2
		state start
    =action>
    	isa decision
    	state checking_failed 
==>
    +goal>
        isa special_stradegy
        state select
)


(p special-stradegy-choose-a ;;; select aggressive stradegy;;; random?
	=goal>
        isa special_stradegy
        state select
==>
	+goal>
        isa aggressive_stradegy
        state start
)


(p special-stradegy-choose-c ;;; select conservative stradegy
	=goal>
        isa special_stradegy
        state select
==>
	+goal>
        isa conservative_stradegy
        state start
    +retrieval>
        isa exposed_cards ;;; recall a card that have asked all the player
        player player3 ;;; need to improve
)

(p aggressive-stradegy-start
	=goal>
        isa aggressive_stradegy
        state start
==>
	=goal>
		isa aggressive_stradegy
		state next
    +action>
    	isa decision
    	state checking
        card_deck multiple
)

(p aggressive-stradegy-ask
	=goal>
        isa aggressive_stradegy
        state next
    =action>
    	isa decision
    	state checking
        card_deck =card ;;; if no multiple cards, send back the first card (single)
==>
	+goal>
		isa state_control
		state retrieving
    +imaginal>
    	isa exposed_cards 
    	card =card
    	player player1 
	+action>
		isa decision
		state ask
		card_ask =card
		opponent_player player1	
		;;; card_get nil
		;;; current_player self
)

(p conservative_stradegy-startA
	=goal>
        isa conservative_stradegy
        state start
    =retrieval>
        isa exposed_cards 
        card =card
        player player3 
==>
	+goal>
		isa state_control
		state retrieving
	+action>
		isa decision
		state ask
		card_ask =card
		opponent_player player3	
		;;; card_get nil
		;;; current_player self
)

(p conservative_stradegy-startB
	=goal>
        isa conservative_stradegy
        state start
    ?retrieval>
    	state error
==>
	+goal>
        isa aggressive_stradegy
        state start
)

(goal-focus goal)